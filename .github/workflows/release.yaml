#===============================================================================
# Build pipeline for releases
#===============================================================================
name: release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release: format(vX.Y.Z) or shortcuts (major, minor, patch)"
        type: string
        default: "patch"
      create_release:
        description: "Whether to publish a GitHub Release"
        type: boolean
        default: false

permissions:
  contents: write
  id-token: write
  packages: write

jobs:
  resolve-version:
    runs-on: ubuntu-latest

    outputs:
      release_version: ${{ steps.set_version.outputs.release_version }}

    steps:
      - name: 📚 Checkout (GitHub)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Resolve version number
        id: set_version
        run: |
          NEXT_VERSION=$(python .github/workflows/scripts/resolve_version.py "${{ github.event.inputs.version }}")
          echo "Release version: $NEXT_VERSION"
          echo "release_version=$NEXT_VERSION" >> $GITHUB_OUTPUT

  build:
    needs: [resolve-version]

    runs-on: ubuntu-latest

    steps:
    - name: Validate on main branch for release creations
      if: ${{ github.event.inputs.create_release == 'true' && github.ref != 'refs/heads/main' }}
      run: |
        echo "Error: a release can only be created from the main branch"
        exit 1

    - name: 📚 Checkout (GitHub)
      uses: actions/checkout@v4
  
    - name: 🛠️ Install build dependencies (Go 1.22)
      uses: actions/setup-go@v5
      with:
        go-version: "1.22"
        cache: false

    - name: 🛠️ Install build dependencies (Go packages)
      run: |
        go install gotest.tools/gotestsum@latest
        go install github.com/goreleaser/goreleaser/v2@latest

    - name: 👷 Check formatting
      run: |
        STATUS=0
        assert-nothing-changed() {
          local diff
          "$@" >/dev/null || return 1
          if ! diff="$(git diff -U1 --color --exit-code)"; then
            printf '\e[31mError: running `\e[1m%s\e[22m` results in modifications that you must check into version control:\e[0m\n%s\n\n' "$*" "$diff" >&2
            git checkout -- .
            STATUS=1
          fi
        }

        assert-nothing-changed go fmt ./...
        assert-nothing-changed go mod tidy

        exit $STATUS

    - name: 👷 Run linter to verify codebase (ci-lint 1.58.1)
      uses: golangci/golangci-lint-action@v6
      with:
        version: v1.58.1
        skip-cache: true
        skip-pkg-cache: true
        skip-build-cache: true

    - name: 👷 Build
      run: make build

    - name: 📚 Run tests
      run: make test

    - name: 🏷️ Create a local release tag
      run: |
        declare -r TAG_NAME="${{ needs.resolve-version.outputs.release_version }}"

        git tag -a ${TAG_NAME} -m "Release ${TAG_NAME}"

    - name: ghcr-login
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📦 Publish release
      if: ${{ inputs.create_release == true }}
      run: goreleaser --clean

    - name: 📦 Publish release (snapshot)
      if: ${{ inputs.create_release == false }}
      run: goreleaser --snapshot --clean
